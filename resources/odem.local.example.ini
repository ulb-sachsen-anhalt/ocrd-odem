[workflow]
# required: local work dir
local_work_root = /home/ocr/odem-wrk-dir
# required: local log dir
local_log_dir = /home/ocr/odem/odem-log

[monitoring]
# optional resource monitoring
enable = True
# executes complete workflow in monitored thread
# use it at own risk, fails from time-to-time to 
# finish largerer work loads (500+ pages)
live = False
# interval in seconds
polling_interval = 1
path_disk_usage = /home/ocr
factor_free_disk_space_needed = 2.0
max_vmem_percentage = 75

[ocr]
# Backend Workflow
#  possible values: 
#   OCRD_PAGE_PARALLEL : OCR-D Phase 3 Implementation
#   ODEM_TESSERACT     : ocr-pipeline newspapers
#  default: None
workflow_type = OCRD_PAGE_PARALLEL
# where to expect images
# Kitodo 3 export       : images/max
# ODEM OAI              : MAX
# Kitodo.Presentation	: DEFAULT
image_subpath = DEFAULT
# how many page containers start in parallel mode
#  default: None
n_executors = 4
# limit for each single page-wise container
docker_container_memory_limit = 2GiB
docker_container_timeout = 600
# docker container image to use for OCRD_PAGE_PARALLEL
ocrd_baseimage = ocrd/all:2023-02-07
ocrd_logging = resources/ocrd_logging.ini
# required: map model config directory from host
ocrd_resources_volumes = /home/ocr/odem-tessdata:/usr/local/share/ocrd-resources/ocrd-tesserocr-recognize
# mapping of ISO-3 language codecs to tesseract model configurations
# Please note:
#   tesseract models must be accessible at runtime at local mount point
#   see configuration [ocr][ocrd_resources_volumes]!
model_mapping = eng: eng.traineddata,
                fre: fra.traineddata,
                ger: frak2021.traineddata,
                grc: grc.traineddata,
                gre: grc.traineddata,
                heb: heb.traineddata,
                hun: hun.traineddata,
                ine: ind.traineddata,
                ita: ita.traineddata,
                lat: lat_ocr.traineddata,
                lav: lav.traineddata,
                pol: pol.traineddata,
                rus: rus.traineddata,
                slo: slv.traineddata,
                spa: spa.traineddata,
                swe: swe.traineddata,
                tur: tur.traineddata,
                urd: urd.traineddata,
                yid: yid.traineddata,
                xxx: yyy.traineddata
# depends on ocr system. if false use first model only, default: True
# needs to be "False" if u use "ocrd-kraken-recognize"
model_combinable = True
tesseract_model_rtl = ara.traineddata, fas.traineddata, heb.traineddata, ulb-fas.traineddata
# elements to be removed from final OCR output
strip_tags = alto:Shape,alto:Processing,alto:Illustration,alto:GraphicalElement
# defines the OCR-D Processing steps. Mandatory. https://ocr-d.de/en/workflows
ocrd_process_list = olena-binarize -I MAX -O OCR-D-BINPAGE -P impl sauvola-ms-split -P dpi 300,
                    anybaseocr-crop -I OCR-D-BINPAGE -O OCR-D-SEG-PAGE-ANYOCR -P dpi 300,
                    cis-ocropy-denoise -I OCR-D-SEG-PAGE-ANYOCR -O OCR-D-DENOISE-OCROPY -P level-of-operation page -P noise_maxsize 3.0 -P dpi 300,
                    tesserocr-segment-region -I OCR-D-DENOISE-OCROPY -O OCR-D-SEG-BLOCK-TESSERACT -P padding 5 -P find_tables false -P dpi 300,
                    segment-repair -I OCR-D-SEG-BLOCK-TESSERACT -O OCR-D-SEGMENT-REPAIR -P plausibilize true -P plausibilize_merge_min_overlap 0.7,
                    cis-ocropy-clip -I OCR-D-SEGMENT-REPAIR -O OCR-D-CLIP,
                    cis-ocropy-segment -I OCR-D-CLIP -O OCR-D-SEGMENT-OCROPY -P spread 2.4 -P dpi 300,
                    cis-ocropy-dewarp -I OCR-D-SEGMENT-OCROPY -O OCR-D-DEWARP,
                    tesserocr-recognize -I OCR-D-DEWARP -O PAGE -P textequiv_level {tesseract_level} -P model {model_config}

[mets]
# optional metadata validation
# Please note:
# 	disabled prevalidation can be used to load incorrect/broken
# 	metadata to local cache store, correct there and play back
prevalidate = False
# turn this off at your own risk
postvalidate = True
# enable ddb validation
ddb_validation = True
# structMapLogical_17 => mets:mptr contains invalid links => DSpace generates
# structMapLogical_22 => DEFAULT fileGroup is missing => DSpace will re-generate
# fileSec_02          => DEFAULT fileGroup is missing => DSpace will re-generate
# originInfo_06       => mods:placeTerm@type="code" considered invalid (DDB drops this at import anyway)
ddb_validation_ignore = structMapLogical_17, structMapLogical_22, fileSec_02, originInfo_06
# METS filegroups to be removed during processing
blacklist_file_groups = THUMB, THUMBS, MIN, FULLTEXT, DOWNLOAD
# METS containers (both pages and logical structures) 
# to be ignored from ocr-ing
blacklist_logical_containers = cover_front,cover_back
blacklist_physical_container_labels = Auftragszettel,Colorchecker,Leerseite,RÃ¼ckdeckel,Deckblatt,Vorderdeckel,Illustration,Karte
# mets agent entry note
agents = ODEM-OCR-D Tesseract ocrd/all:2023-02-07
# which mods:recordIdentifier to use tis time
# optional but must exist and be unique
record_identifier_xpr = //mods:mods/mods:recordInfo/mods:recordIdentifier[@source]/text()

[derivans]
# optional ODEM PDF assets
derivans_enabled = True
derivans_image = ghcr.io/ulb-sachsen-anhalt/digital-derivans:2.0.0
derivans_config = resources/derivans.ini
derivans_logdir = /home/ocr/odem/odem-log/

[export]
# optional ODEM archive export asset
export_enabled = True
export_tmp = /home/ocr/odem-tmp-export
# required
export_dst = /home/ocr/odem-export
# if creating DSpace SAF asset, create item's collection asset
export_collection = 123456/789
# map which files to include in export asset
export_mappings = .xml: mets.xml, .pdf: , FULLTEXT:
# possible formats SAF, FLAT_ZIP (default: SAF)
export_format = FLAT_ZIP
# include modified METS in export asset (default: True)
export_mets = True
# enrich OCR-ALTO in METS/MODS (default: True)
enrich_mets_fulltext = True
