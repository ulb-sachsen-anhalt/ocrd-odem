[workflow]
# required: local work dir
local_work_root = /home/ocr/odem-wrk-dir
# required: local log dir
local_log_dir = /home/ocr/odem/odem-log
# optional log instance when running on same host
;logfile_name = _01
# optional store to cache (and/or correct) metadata
; local_store_root = /home/ocr/odem-store
# if records used as data container, define field mapping
data_fields = IDENTIFIER, INFO, STATE, STATE_TIME
# if record data requested via OAI-PMH, set oai_base_url
;base_url = https://opendata.uni-halle.de/oai/dd
# probably require additional requests kwargs for statistics
;base_url_requests_kwargs = timeout=20, headers={"User-Agent": "ulbbot+IT-WF-OCR"}
# create optional textual asset file
;create_textline_asset = True
# wipe derivans work subdirs before export
delete_before_export = MAX, IMAGE_80, PAGE
# ensure local downloaded resources are removed
# from work_dir and optional store
remove_resources = True

[monitoring]
enable = True
# executes complete workflow in monitored thread
# use it at own risk, fails from time-to-time to 
# finish largerer work loads (500+ pages)
live = False
# interval in seconds
polling_interval = 1
path_disk_usage = /<path-where-to-monitor>
factor_free_disk_space_needed = 2.0
max_vmem_percentage = 75
;max_vmem_bytes = 9000000000

[ocr]
# Backend Workflow
#  possible values: 
#   OCRD_PAGE_PARALLEL : OCR-D Phase 3 Implementation
#   ODEM_TESSERACT     : ocr-pipeline newspapers
#  default: None
workflow_type = OCRD_PAGE_PARALLEL
# where to expect images
image_subpath = MAX
# how many page containers start in parallel mode
#  default: None
n_executors = 8
# limit for each single page-wise container
docker_container_memory_limit = 4GiB
docker_container_timeout = 600
# optional account mapping inside container
# defaults to current user/group
;docker_container_user = 1000
# if running OCR-D-based workflow, specify image
ocrd_baseimage = ocrd/all:2023-02-07
ocrd_logging = resources/ocrd_logging.ini
ocrd_resources_volumes = /home/ocr/odem-tessdata:/usr/local/share/ocrd-resources/ocrd-tesserocr-recognize
# if running Tesseract in the backend
# mapping of ISO-3 language codecs to tesseract model configurations
#
# Please note:
# * tesseract models must be accessible at runtime
# * final mapping xxx => yyy is used as test value!
#
model_mapping = ara: ara.traineddata,
                cze: ces.traineddata,
                dan: dan.traineddata,
                dut: nld.traineddata,
                eng: eng.traineddata,
                fre: fra.traineddata,
                ger: gt4hist_5000k.traineddata,
                grc: grc.traineddata,
                gre: grc.traineddata,
                heb: heb.traineddata,
                hun: hun.traineddata,
                ine: ind.traineddata,
                ita: ita.traineddata,
                lat: lat_ocr.traineddata,
                lav: lav.traineddata,
                nds: gt4hist_5000k.traineddata,
                per: fas.traineddata,
                pol: pol.traineddata,
                rus: rus.traineddata,
                slo: slv.traineddata,
                spa: spa.traineddata,
                swe: swe.traineddata,
                tur: tur.traineddata,
                urd: urd.traineddata,
                yid: yid.traineddata,
                xxx: yyy.traineddata
# depends on ocr system. if false use first model only, default: True
# needs to be "False" if u use "ocrd-kraken-recognize"
model_combinable = True
tesseract_model_rtl = ara.traineddata, fas.traineddata, heb.traineddata, ulb-fas.traineddata
# elements to be removed from final OCR output
strip_tags = alto:Shape,alto:Processing,alto:Illustration,alto:GraphicalElement
# defines the OCR-D Processing steps. Mandatory. https://ocr-d.de/en/workflows
ocrd_process_list = olena-binarize -I MAX -O OCR-D-BINPAGE -P impl sauvola-ms-split -P dpi 300,
                    anybaseocr-crop -I OCR-D-BINPAGE -O OCR-D-SEG-PAGE-ANYOCR -P dpi 300,
                    cis-ocropy-denoise -I OCR-D-SEG-PAGE-ANYOCR -O OCR-D-DENOISE-OCROPY -P level-of-operation page -P noise_maxsize 3.0 -P dpi 300,
                    tesserocr-segment-region -I OCR-D-DENOISE-OCROPY -O OCR-D-SEG-BLOCK-TESSERACT -P padding 5 -P find_tables false -P dpi 300,
                    segment-repair -I OCR-D-SEG-BLOCK-TESSERACT -O OCR-D-SEGMENT-REPAIR -P plausibilize true -P plausibilize_merge_min_overlap 0.7,
                    cis-ocropy-clip -I OCR-D-SEGMENT-REPAIR -O OCR-D-CLIP,
                    cis-ocropy-segment -I OCR-D-CLIP -O OCR-D-SEGMENT-OCROPY -P spread 2.4 -P dpi 300,
                    cis-ocropy-dewarp -I OCR-D-SEGMENT-OCROPY -O OCR-D-DEWARP,
                    tesserocr-recognize -I OCR-D-DEWARP -O PAGE -P textequiv_level {tesseract_level} -P model {model_config}

[mets]
# enable/disable METS validations
# disabel prevalidate can be used to load incorrect/broken
# metadata into store, correct them locally and hopefully
# play it back
prevalidate = True
# turn this off at your own risk
postvalidate = True
# enable ddb validation
ddb_validation = True
# structMapLogical_22 => DEFAULT fileGroup is missing => DSpace will re-generate
# fileSec_02          => DEFAULT fileGroup is missing => DSpace will re-generate
# originInfo_06       => mods:placeTerm@type="code" considered invalid (DDB drops this at import anyway)
ddb_validation_ignore = structMapLogical_22, fileSec_02, originInfo_06
# METS filegroups to be removed during processing
blacklist_file_groups = DEFAULT, THUMB, THUMBS, MIN, FULLTEXT, DOWNLOAD
# METS containers (both pages and logical structures) 
# to be ignored from ocr-ing
blacklist_logical_containers = cover_front,cover_back
blacklist_physical_container_labels = Auftragszettel,Colorchecker,Leerseite,RÃ¼ckdeckel,Deckblatt,Vorderdeckel,Illustration,Karte
# mets agent entry note
agents = ODEM-OCR-D Tesseract ocrd/all:2023-02-07
# identifier to name *digital object* and it's PDF derivate
# *must* exist and be *unique*!
# example assumes mods:recordInfo/mods:recordIdentifier@source present
record_identifier_xpr = //mods:mods/mods:recordInfo/mods:recordIdentifier[@source]/text()

[derivans]
# configure optional OCR-assets
derivans_enabled = True
derivans_image = ghcr.io/ulb-sachsen-anhalt/digital-derivans:2.0.0
derivans_config = resources/derivans.ini
derivans_logdir = /home/ocr/odem/odem-log/

[export]
# configure optional export actions and formats
export_enabled = True
export_tmp = /home/ocr/odem-tmp-export
# required
export_dst = /data/ktopro-opendata/odem
export_collection = 123456/789
export_mappings = .xml: mets.xml, .pdf: , FULLTEXT:
# possible formats SAF, FLAT_ZIP (default: SAF)
export_format = SAF
# optional name of *export artefact*
# if omitted, use record_identifier (see mets section)
# if present, unique hit *must* exist
export_artefact_name = //mods:mods/mods:identifier[@type="urn"]/text()
# (default: True)
# include modified METS in export asset
export_mets = True
# (default: True)
enrich_mets_fulltext = True

# configure server/client mechanics if run 
# in distributed client/server-mode
[record-server]
record_server_url = <SERVICE-IP>
record_server_port = <SERVICE-PORT>
record_server_resource_dir = <RECORD-LIST-DIR>
accepted_ips = <WHITELISTED-IP-01>
