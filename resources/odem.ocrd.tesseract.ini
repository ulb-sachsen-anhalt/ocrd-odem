[global]
data_fields = IDENTIFIER, SETSPEC, CREATED, INFO, STATE, STATE_TIME
base_url = https://opendata.uni-halle.de/oai/dd
local_work_root = /home/ocr/odem-wrk-dir
local_export_tmp = /home/ocr/odem-tmp-export
local_log_dir = /home/ocr/odem/odem-log
local_export_dir = /data/ktopro-opendata/ocrd-odem
delete_before_export = MAX, IMAGE_80, PAGE
export_collection = 123456/789
export_mappings = .xml: mets.xml, .pdf: , FULLTEXT:

[resource-monitoring]
enable = True
polling_interval = 1
path_disk_usage = /home/ocr
factor_free_disk_space_needed = 2.0
#
# maximum amount of total used virtual memory
# value as percent or absolute bytes
#
max_vmem_percentage = 75
;max_vmem_bytes = 9000000000

[ocr]
# how many OCR-D containers to start in parallel mode
n_executors = 12
# limit for each single page-wise container
docker_container_memory_limit = 4GiB
docker_container_timeout = 1200

# optional account mapping
# used inside container
# defaults to current user/group
;docker_container_user = 1000

ocrd_baseimage = ocrd/all:2023-02-07
ocrd_logging = resources/ocrd_logging.conf
ocrd_makefile = resources/ulb-odem.mk
ocrd_resources_volumes = /data/ocr/tesseract4/tessdata:/usr/local/share/ocrd-resources/ocrd-tesserocr-recognize

#
# mapping of ISO-3 language codecs to tesseract model configurations
#
# Please note:
# * tesseract models must be accessible at runtime
# * final mapping xxx => yyy is used as test value!
#
model_mapping = ara: ara.traineddata,
                cze: ces.traineddata,
                dan: dan.traineddata,
                dut: nld.traineddata,
                eng: eng.traineddata,
                fre: fra.traineddata,
                ger: gt4hist_5000k.traineddata,
                grc: grc.traineddata,
                gre: grc.traineddata,
                heb: heb.traineddata,
                hun: hun.traineddata,
                ine: ind.traineddata,
                ita: ita.traineddata,
                lat: lat_ocr.traineddata,
                lav: lav.traineddata,
                nds: gt4hist_5000k.traineddata,
                per: fas.traineddata,
                pol: pol.traineddata,
                rus: rus.traineddata,
                slo: slv.traineddata,
                spa: spa.traineddata,
                swe: swe.traineddata,
                tur: tur.traineddata,
                urd: urd.traineddata,
                yid: yid.traineddata,
                xxx: yyy.traineddata
# depends on ocr system. if false use first model only, default: True
# needs to be "False" if u use "ocrd-kraken-recognize"
model_combinable = True
tesseract_model_rtl = ara.traineddata, fas.traineddata, heb.traineddata, ulb-fas.traineddata
# elements to be removed from final OCR output
strip_tags = alto:Shape,alto:Processing,alto:Illustration,alto:GraphicalElement

[mets]
blacklist_file_groups = DEFAULT, THUMB, THUMBS, MIN, FULLTEXT, DOWNLOAD
blacklist_logical_containers = cover_front,cover_back
blacklist_physical_container_labels = Auftragszettel,Colorchecker,Leerseite,RÃ¼ckdeckel,Deckblatt,Vorderdeckel,Illustration,Karte

[derivans]
derivans_enabled = True
derivans_image = ghcr.io/ulb-sachsen-anhalt/digital-derivans:latest
derivans_config = bin/config/derivans.ini
derivans_logdir = /home/ocr/odem/odem-log/

[oai-server] # master & worker
oai_server_url = <OAI-SERVICE-IP>
oai_server_port = <OAI-SERVICE-PORT>

[export]
# possible formats SAF, FLAT_ZIP (default: SAF)
export_format = SAF
# (default: True)
export_mets = True
# (default: True)
enrich_mets_fulltext = True